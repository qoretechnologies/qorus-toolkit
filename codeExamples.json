{"QorusAuthenticator.addEndpoint":"// Initializes a new endpoint and returns it\n// Optional user and pass parameters can be provided to initialize the endpoint and then authenticate the user\nQorus.QorusAuthenticator.addEndpoint({\n  endpointId: 'rippy',\n  url: 'https://sandbox.qoretechnologies.com',\n  version: 'latest',\n});\n// => {\"url\":\"https://sandbox.qoretechnologies.com\",\"id\":\"rippy\",\"version\":\"latest\"}\n","QorusAuthenticator.checkNoAuth":"// Initializes a new endpoint and returns it\nconst endpoint = Qorus.QorusAuthenticator.addEndpoint({\n  endpointId: 'rippy',\n  url: 'https://sandbox.qoretechnologies.com',\n  version: 'latest',\n});\n\n// Returns true if the no-auth is enabled, false otherwise\nQorus.QorusAuthenticator.checkNoAuth(endpoint);\n// => False\n","QorusAuthenticator.getAllEndpoints":"// Initializes a new endpoint and returns it\nconst endpoint = Qorus.QorusAuthenticator.addEndpoint({\n  endpointId: 'rippy',\n  url: 'https://sandbox.qoretechnologies.com',\n  version: 'latest',\n});\n\nQorus.QorusAuthenticator.getAllEndpoints();\n// => [{ \"url\":\"https://sandbox.qoretechnologies.com\",\"id\":\"rippy\",\"version\": \"latest\" }]\n","QorusAuthenticator.getApiPaths":"Qorus.QorusAuthenticator.addEndpoint({\n  endpointId: 'rippy',\n  url: 'https://sandbox.qoretechnologies.com',\n  version: 'latest',\n});\n\nQorus.QorusAuthenticator.getApiPaths();\n// => {\"login\":\"/api/latest/public/login\",\"logout\":\"/api/latest/logout\",\"validateToken\":\"/api/latest/system?action=validateWsToken\",\"validateNoAuth\":\"/api/latest/public/info\"}\n","QorusAuthenticator.getAuthToken":"Qorus.QorusAuthenticator.addEndpoint({\n  endpointId: 'rippy',\n  url: 'https://sandbox.qoretechnologies.com',\n  version: 'latest',\n});\nawait Qorus.QorusAuthenticator.login({ user: 'sandbox', pass: 'sandbox' });\n\nQorus.QorusAuthenticator.getAuthToken();\n// => \"random token hash returned from the server\"\n","QorusAuthenticator.getEndpointById":"Qorus.QorusAuthenticator.addEndpoint({\n  endpointId: 'rippy',\n  url: 'https://sandbox.qoretechnologies.com',\n  version: 'latest',\n});\n\n// Returns the endpoint if exists in the endpoints array\nawait Qorus.QorusAuthenticator.getEndpointById('rippy');\n// => {\"url\":\"https://sandbox.qoretechnologies.com\",\"id\":\"rippy\",\"version\":\"latest\"}\n","QorusAuthenticator.getEndpointVersion":"Qorus.QorusAuthenticator.addEndpoint({\n  endpointId: 'rippy',\n  url: 'https://sandbox.qoretechnologies.com',\n  version: 'latest',\n});\n\nQorus.QorusAuthenticator.getEndpointVersion();\n// => 'latest'\n","QorusAuthenticator.getSelectedEndpoint":"Qorus.QorusAuthenticator.addEndpoint({\n  url: 'https://sandbox.qoretechnologies.com',\n  endpointId: 'rippy',\n  version: 'latest',\n});\n// Returns selected endpoint\nawait Qorus.QorusAuthenticator.getSelectedEndpoint();\n// => {\"url\":\"https://sandbox.qoretechnologies.com\",\"id\":\"rippy\",\"version\":\"latest\"}\n","QorusAuthenticator.login":"Qorus.QorusAuthenticator.addEndpoint({\n  url: 'https://sandbox.qoretechnologies.com',\n  endpointId: 'rippy',\n  version: 'latest',\n});\nawait Qorus.QorusAuthenticator.login({\n  user: 'sandbox',\n  pass: 'sandbox',\n});\n// => \"random token hash returned from the server\"\n","QorusAuthenticator.logout":"//Initialize the endpoint before authentication\nQorus.QorusAuthenticator.addEndpoint({\n  url: 'https://sandbox.qoretechnologies.com',\n  endpointId: 'rippy',\n  version: 'latest',\n});\n\n// Log in first\nawait Qorus.QorusAuthenticator.login({\n  user: 'sandbox',\n  pass: 'sandbox',\n});\n\n// Logs out the user\nawait Qorus.QorusAuthenticator.logout();\n// => void\n","QorusAuthenticator.renewSelectedEndpointToken":"Qorus.QorusAuthenticator.addEndpoint({\n  url: 'https://sandbox.qoretechnologies.com',\n  endpointId: 'rippy',\n  version: 'latest',\n});\nawait Qorus.QorusAuthenticator.login({\n  user: 'sandbox',\n  pass: 'sandbox',\n});\n\n// Renews auth-token for the selected endpoint\nawait Qorus.QorusAuthenticator.renewSelectedEndpointToken({ user: 'sandbox', pass: 'sandbox' });\n// => \"random token hash returned from the server\"\n","QorusAuthenticator.selectEndpoint":"Qorus.QorusAuthenticator.addEndpoint({\n  url: 'https://sandbox.qoretechnologies.com',\n  endpointId: 'rippy',\n  version: 'latest',\n});\nawait Qorus.QorusAuthenticator.login({\n  user: 'sandbox',\n  pass: 'sandbox',\n});\n\n// Changes selected endpoint and return true if selected\nawait Qorus.QorusAuthenticator.selectEndpoint('rippy');\n// => {\"url\":\"https://sandbox.qoretechnologies.com\",\"id\":\"rippy\",\"version\":\"latest\"}\n","QorusAuthenticator.setEndpointUrl":"Qorus.QorusAuthenticator.addEndpoint({\n  url: 'https://sandbox.qoretechnologies.com',\n  endpointId: 'rippy',\n  version: 'latest',\n});\nawait Qorus.QorusAuthenticator.login({\n  user: 'sandbox',\n  pass: 'sandbox',\n});\n\nawait Qorus.QorusAuthenticator.setEndpointUrl('https://www.google.com', 'rippy');\n// => 'https://www.google.com'\n","QorusAuthenticator.setEndpointVersion":"Qorus.QorusAuthenticator.addEndpoint({\n  url: 'https://sandbox.qoretechnologies.com',\n  endpointId: 'rippy',\n  version: 'latest',\n});\nawait Qorus.QorusAuthenticator.login({\n  user: 'sandbox',\n  pass: 'sandbox',\n});\n\nawait Qorus.QorusAuthenticator.setEndpointVersion(6, 'rippy');\n// => 6\n","QorusAuthenticator.validateEndpointData":"// Initializes a new endpoint and returns it\n// Optional user and pass parameters can be provided to initialize the endpoint and then authenticate the user\nconst endpoint = {\n  endpointId: 'rippy',\n  url: 'https://sandbox.qoretechnologies.com',\n  version: 'latest',\n};\n\n// Returns true if the no-auth is enabled, false otherwise\nQorus.QorusAuthenticator.validateEndpointData(endpoint, false);\n// => true\n","QorusAuthenticator.validateLocalUserToken":"// Initializes a new endpoint and returns it\n// Optional user and pass parameters can be provided to initialize the endpoint and then authenticate the user\nconst endpoint = Qorus.QorusAuthenticator.addEndpoint({\n  endpointId: 'rippy',\n  url: 'https://sandbox.qoretechnologies.com',\n  version: 'latest',\n});\n\n// Returns true if the no-auth is enabled, false otherwise\nQorus.QorusAuthenticator.validateLocalUserToken('rippy');\n// => null\n","QorusDataProvider.get":"Qorus.QorusAuthenticator.addEndpoint({\n  url: 'https://sandbox.qoretechnologies.com',\n  endpointId: 'rippy',\n  version: 'latest',\n});\nawait Qorus.QorusAuthenticator.login({\n  user: 'sandbox',\n  pass: 'sandbox',\n});\n// Browse data providers with context api\nconst dataProviderBrowse = await Qorus.QorusDataProvider.getApi();\n// Select factory provider\nconst browseChildrenNames = dataProviderBrowse.getChildrenNames();\nconst factory = await dataProviderBrowse.get(browseChildrenNames.factory);\n// => ProviderWithOptions { path: ..., responseData: {...}, providerData: {...}, responseError: {...}, context: ...}\n","QorusDataProvider.getAllOptions":"Qorus.QorusAuthenticator.addEndpoint({\n  url: 'https://sandbox.qoretechnologies.com',\n  endpointId: 'rippy',\n  version: 'latest',\n});\nawait Qorus.QorusAuthenticator.login({\n  user: 'sandbox',\n  pass: 'sandbox',\n});\n// Browse data providers with context api\nconst dataProviderBrowse = await Qorus.QorusDataProvider.getApi();\n// Select factory provider\nconst browseChildrenNames = dataProviderBrowse.getChildrenNames();\nconst factory = await dataProviderBrowse.get(browseChildrenNames.factory);\nconst allOptions = factory.getAllOptions();\n// => QorusOptions [{name: ..., providerOptions: [{name: ..., required: ..., types: [...], jsTypes: [...], value: ...}]}]\n","QorusDataProvider.getApi":"Qorus.QorusAuthenticator.addEndpoint({\n  url: 'https://sandbox.qoretechnologies.com',\n  endpointId: 'rippy',\n});\nawait Qorus.QorusAuthenticator.login({\n  user: 'sandbox',\n  pass: 'sandbox',\n});\n// Browse data providers with context api\nconst dataProviderBrowse = await Qorus.QorusDataProvider.getApi();\n// Select factory provider\nconst browseChildrenNames = dataProviderBrowse.getChildrenNames();\nconst factory = await dataProviderBrowse.getApi(browseChildrenNames.factory);\n// => ProviderWithOptions { path: ..., responseData: {...}, providerData: {...}, responseError: {...}, context: ...}\n","QorusDataProvider.getChildren":"Qorus.QorusAuthenticator.addEndpoint({\n  url: 'https://sandbox.qoretechnologies.com',\n  endpointId: 'rippy',\n  version: 'latest',\n});\nawait Qorus.QorusAuthenticator.login({\n  user: 'sandbox',\n  pass: 'sandbox',\n});\n// Browse data providers with context api\nconst dataProviderBrowse = await Qorus.QorusDataProvider.getApi();\n// Select factory provider\nconst browseChildrenNames = dataProviderBrowse.getChildrenNames();\nconst factory = await dataProviderBrowse.get(browseChildrenNames.factory);\nconst children = factory.getChildren();\n// => [{name: ..., description: ..., constructorOptions: [...], type: ...]\n","QorusDataProvider.getChildrenNames":"Qorus.QorusAuthenticator.addEndpoint({\n  url: 'https://sandbox.qoretechnologies.com',\n  endpointId: 'rippy',\n});\nawait Qorus.QorusAuthenticator.login({\n  user: 'sandbox',\n  pass: 'sandbox',\n});\n// Browse data providers with context api\nconst dataProviderBrowse = await Qorus.QorusDataProvider.getApi();\n// Select factory provider\nconst browseChildrenNames = dataProviderBrowse.getChildrenNames();\n// {factory: 'factory', connection: 'connection', datasource: 'datasource' }\n","QorusDataProvider.getContext":"Qorus.QorusAuthenticator.addEndpoint({\n  url: 'https://sandbox.qoretechnologies.com',\n  endpointId: 'rippy',\n  version: 'latest',\n});\nawait Qorus.QorusAuthenticator.login({\n  user: 'sandbox',\n  pass: 'sandbox',\n});\n// Browse data providers with context api\nconst dataProviderBrowse = await Qorus.QorusDataProvider.getContext();\n// Select factory provider\nconst browseChildrenNames = dataProviderBrowse.getChildrenNames();\nconst factory = await dataProviderBrowse.get(browseChildrenNames.factory);\nconst context = factory.getContext();\n// => Context \"record\"\n","QorusDataProvider.getData":"Qorus.QorusAuthenticator.addEndpoint({\n  url: 'https://sandbox.qoretechnologies.com',\n  endpointId: 'rippy',\n  version: 'latest',\n});\nawait Qorus.QorusAuthenticator.login({\n  user: 'sandbox',\n  pass: 'sandbox',\n});\n\n// Browse data providers with context api\nconst dataProviderBrowse = await Qorus.QorusDataProvider.getApi();\n// Select factory provider\nconst browseChildrenNames = dataProviderBrowse.getChildrenNames();\nconst factory = await dataProviderBrowse.get(browseChildrenNames.factory);\n// => ProviderWithOptions { path: ..., responseData: {...}, providerData: {...}, responseError: {...}, context: ...}\n\nfactory.getData('db');\n// => { responseData: ..., providerData: ..., errorData: ... }\n","QorusDataProvider.getEvent":"Qorus.QorusAuthenticator.addEndpoint({\n  url: 'https://sandbox.qoretechnologies.com',\n  endpointId: 'rippy',\n  version: 'latest',\n});\nawait Qorus.QorusAuthenticator.login({\n  user: 'sandbox',\n  pass: 'sandbox',\n});\n// Browse data providers with context event\nconst dataProviderBrowse = await Qorus.QorusDataProvider.getEvent();\n// Select factory provider\nconst browseChildrenNames = dataProviderBrowse.getChildrenNames();\nconst factory = await dataProviderBrowse.get(browseChildrenNames.factory);\n// => ProviderWithOptions { path: ..., responseData: {...}, providerData: {...}, responseError: {...}, context: ...}\n","QorusDataProvider.getFinalPath":"Qorus.QorusAuthenticator.addEndpoint({\n  url: 'https://sandbox.qoretechnologies.com',\n  endpointId: 'rippy',\n  version: 'latest',\n});\nawait Qorus.QorusAuthenticator.login({\n  user: 'sandbox',\n  pass: 'sandbox',\n});\n// Browse data providers with context api\nconst dataProviderBrowse = await Qorus.QorusDataProvider.getApi();\n// Select factory provider\nconst browseChildrenNames = dataProviderBrowse.getChildrenNames();\nconst factory = await dataProviderBrowse.get(browseChildrenNames.factory);\nconst path = factory.getFinalPath();\n// => \"/api/latest/dataprovider/browse/factory/\"\n","QorusDataProvider.getMessage":"Qorus.QorusAuthenticator.addEndpoint({\n  url: 'https://sandbox.qoretechnologies.com',\n  endpointId: 'rippy',\n  version: 'latest',\n});\nawait Qorus.QorusAuthenticator.login({\n  user: 'sandbox',\n  pass: 'sandbox',\n});\n\n// Browse data providers with context message\nconst dataProviderBrowse = await Qorus.QorusDataProvider.getMessage();\n// Select factory provider\nconst browseChildrenNames = dataProviderBrowse.getChildrenNames();\nconst factory = await dataProviderBrowse.getMessage(browseChildrenNames.factory);\n// => ProviderWithOptions { path: ..., responseData: {...}, providerData: {...}, responseError: {...}, context: ...}\n","QorusDataProvider.getOptions":"Qorus.QorusAuthenticator.addEndpoint({\n  url: 'https://sandbox.qoretechnologies.com',\n  endpointId: 'rippy',\n  version: 'latest',\n});\nawait Qorus.QorusAuthenticator.login({\n  user: 'sandbox',\n  pass: 'sandbox',\n});\n// Browse data providers with context api\nconst dataProviderBrowse = await Qorus.QorusDataProvider.getRecord();\n// Select factory provider\nconst browseChildrenNames = dataProviderBrowse.getChildrenNames();\nconst factory = await dataProviderBrowse.get(browseChildrenNames.factory);\n\nconst allOptions = factory.getOptions('db');\n// => QorusOptions {name: \"db\", providerOptions: [{name: ..., required: ..., types: [...], jsTypes: [...], value: ...}]}\n","QorusDataProvider.getPath":"Qorus.QorusAuthenticator.addEndpoint({\n  url: 'https://sandbox.qoretechnologies.com',\n  endpointId: 'rippy',\n  version: 'latest',\n});\nawait Qorus.QorusAuthenticator.login({\n  user: 'sandbox',\n  pass: 'sandbox',\n});\n// Browse data providers with context api\nconst dataProviderBrowse = await Qorus.QorusDataProvider.getApi();\n// Select factory provider\nconst browseChildrenNames = dataProviderBrowse.getChildrenNames();\nconst factory = await dataProviderBrowse.get(browseChildrenNames.factory);\nconst path = factory.getPath();\n// => [\"/api/latest/dataprovider/browse\",\"factory\"]\n","QorusDataProvider.getRecord":"Qorus.QorusAuthenticator.addEndpoint({\n  url: 'https://sandbox.qoretechnologies.com',\n  endpointId: 'rippy',\n  version: 'latest',\n});\nawait Qorus.QorusAuthenticator.login({\n  user: 'sandbox',\n  pass: 'sandbox',\n});\n\n// Browse data providers with context record\nconst dataProviderBrowse = await Qorus.QorusDataProvider.getRecord();\n// Select factory provider\nconst browseChildrenNames = dataProviderBrowse.getChildrenNames();\n","QorusDataProvider.getType":"Qorus.QorusAuthenticator.addEndpoint({\n  url: 'https://sandbox.qoretechnologies.com',\n  endpointId: 'rippy',\n  version: 'latest',\n});\nawait Qorus.QorusAuthenticator.login({\n  user: 'sandbox',\n  pass: 'sandbox',\n});\n\n// Browse data providers with context type\nconst dataProviderBrowse = await Qorus.QorusDataProvider.getType();\n\n// Select factory provider\nconst browseChildrenNames = dataProviderBrowse.getChildrenNames();\n","QorusDataProvider.has":"Qorus.QorusAuthenticator.addEndpoint({\n  url: 'https://sandbox.qoretechnologies.com',\n  endpointId: 'rippy',\n  version: 'latest',\n});\nawait Qorus.QorusAuthenticator.login({\n  user: 'sandbox',\n  pass: 'sandbox',\n});\n\n// Browse data providers with context api\nconst dataProviderBrowse = await Qorus.QorusDataProvider.getRecord();\n// Select factory provider\nconst browseChildrenNames = dataProviderBrowse.getChildrenNames();\nconst factory = await dataProviderBrowse.get(browseChildrenNames.factory);\n// => ProviderWithOptions { path: ..., responseData: {...}, providerData: {...}, responseError: {...}, context: ...}\n\nfactory.has('db');\n// => true\n","QorusDataProvider.hasData":"Qorus.QorusAuthenticator.addEndpoint({\n  url: 'https://sandbox.qoretechnologies.com',\n  endpointId: 'rippy',\n  version: 'latest',\n});\nawait Qorus.QorusAuthenticator.login({\n  user: 'sandbox',\n  pass: 'sandbox',\n});\n\n// Browse data providers with context api\nconst dataProviderBrowse = await Qorus.QorusDataProvider.getRecord();\n// Select factory provider\nconst browseChildrenNames = dataProviderBrowse.getChildrenNames();\nconst factory = await dataProviderBrowse.get(browseChildrenNames.factory);\n// => ProviderWithOptions { path: ..., responseData: {...}, providerData: {...}, responseError: {...}, context: ...}\n\nfactory.hasData();\n// => false\n","QorusDataProvider.setPath":"Qorus.QorusAuthenticator.addEndpoint({\n  url: 'https://sandbox.qoretechnologies.com',\n  endpointId: 'rippy',\n  version: 'latest',\n});\nawait Qorus.QorusAuthenticator.login({\n  user: 'sandbox',\n  pass: 'sandbox',\n});\n// Browse data providers with context api\nconst dataProviderBrowse = await Qorus.QorusDataProvider.getApi();\n// Select factory provider\nconst browseChildrenNames = dataProviderBrowse.getChildrenNames();\nconst factory = await dataProviderBrowse.get(browseChildrenNames.factory);\n\n// Setter to set the api path for a provider\nfactory.setPath(['/api/latest/dataprovider/browse', 'factory']);\n","QorusInterface._get":"Qorus.QorusAuthenticator.addEndpoint({\n  url: 'https://sandbox.qoretechnologies.com',\n  endpointId: 'rippy',\n  version: 'latest',\n});\nawait Qorus.QorusAuthenticator.login({\n  user: 'sandbox',\n  pass: 'sandbox',\n});\n\n// _get is a protected method used by other Qorus interfaces\nconst job = await QorusWorkflows.get(1);\n// => IWorkflow {workflowid, name, enabled...}\n","QorusInterface.enable":"Qorus.QorusAuthenticator.addEndpoint({\n  url: 'https://sandbox.qoretechnologies.com',\n  endpointId: 'rippy',\n  version: 'latest',\n});\nawait Qorus.QorusAuthenticator.login({\n  user: 'sandbox',\n  pass: 'sandbox',\n});\n\nconst job = await QorusWorkflows.enable(1);\n// => IQorusEnableDisableTransformed {id, name, version, info}\n","QorusInterface.kill":"Qorus.QorusAuthenticator.addEndpoint({\n  url: 'https://sandbox.qoretechnologies.com',\n  endpointId: 'rippy',\n  version: 'latest',\n});\nawait Qorus.QorusAuthenticator.login({\n  user: 'sandbox',\n  pass: 'sandbox',\n});\n\n// Returns ok if the the operation was successful, throws an error otherwise\nconst job = await QorusWorkflows.kill(1);\n// => ok\n","QorusJobs.get":"Qorus.QorusAuthenticator.addEndpoint({\n  url: 'https://sandbox.qoretechnologies.com',\n  endpointId: 'rippy',\n  version: 'latest',\n});\nawait Qorus.QorusAuthenticator.login({\n  user: 'sandbox',\n  pass: 'sandbox',\n});\n\nconst job = await QorusJobs.get(22);\n// => IJob {jobid, name, enabled...}\n","QorusOptions.get":"Qorus.QorusAuthenticator.addEndpoint({\n  url: 'https://sandbox.qoretechnologies.com',\n  endpointId: 'rippy',\n  version: 'latest',\n});\nawait Qorus.QorusAuthenticator.login({\n  user: 'sandbox',\n  pass: 'sandbox',\n});\n// Browse data provider with context record\nconst dataProviderBrowse = await Qorus.QorusDataProvider.getRecord();\n\n// Select factory provider\nconst factoryProvider = await dataProviderBrowse.get('factory');\n\n// Select db provider\nconst options = factoryProvider.getOptions('db');\n\n// Get object of provided constructor option\noptions.get('datasource');\n// => {name: \"datasource\", required: true, types: [\"string\", \"object<AbstractDatasource>\"], jsTypes: [\"string\", \"oject\"], value: null}\n","QorusOptions.getAll":"Qorus.QorusAuthenticator.addEndpoint({\n  endpointId: 'rippy',\n  url: 'https://sandbox.qoretechnologies.com',\n  version: 'latest',\n});\nawait Qorus.QorusAuthenticator.login({\n  user: 'sandbox',\n  pass: 'sandbox',\n});\n// Browse data provider with context record\nconst dataProviderBrowse = await Qorus.QorusDataProvider.getRecord();\n\n// Select factory provider\nconst factoryProvider = await dataProviderBrowse.get('factory');\n\n// Select db provider\nconst options = factoryProvider.getOptions('db');\n\n// Set required constructor option\noptions.set('datasource', 'pgsql:omquser/omquser@omquser%bee');\n\n// Returns all the the constructor properties with their values, throws error if any required property have not been provided and return undefined.\noptions.getAll();\n// => {datasource: \"pgsql:omquser/omquser@omquser%bee\"}\n","QorusOptions.getJsType":"Qorus.QorusAuthenticator.addEndpoint({\n  url: 'https://sandbox.qoretechnologies.com',\n  endpointId: 'rippy',\n  version: 'latest',\n});\nawait Qorus.QorusAuthenticator.login({\n  user: 'sandbox',\n  pass: 'sandbox',\n});\n// Browse data provider with context record\nconst dataProviderBrowse = await Qorus.QorusDataProvider.getRecord();\n\n// Select factory provider\nconst factoryProvider = await dataProviderBrowse.get('factory');\n\n// Select db provider\nconst options = factoryProvider.getOptions('db');\n\n// Get js types for the provided constructor option\noptions.getJsType('datasource');\n// => [\"string\", \"object\"]\n","QorusOptions.getType":"Qorus.QorusAuthenticator.addEndpoint({\n  url: 'https://sandbox.qoretechnologies.com',\n  endpointId: 'rippy',\n  version: 'latest',\n});\nawait Qorus.QorusAuthenticator.login({\n  user: 'sandbox',\n  pass: 'sandbox',\n});\n\n// Browse data provider with context record\nconst dataProviderBrowse = await Qorus.QorusDataProvider.getRecord();\n\n// Select factory provider\nconst factoryProvider = await dataProviderBrowse.get('factory');\n\n// Select db provider\nconst options = factoryProvider.getOptions('db');\n\n// Get qore type for the provided constructor option\noptions.getType('datasource');\n// => [\"string\", \"object<AbstractDatasource>\"]\n","QorusOptions.set":"Qorus.QorusAuthenticator.addEndpoint({\n  url: 'https://sandbox.qoretechnologies.com',\n  endpointId: 'rippy',\n  version: 'latest',\n});\nawait Qorus.QorusAuthenticator.login({\n  user: 'sandbox',\n  pass: 'sandbox',\n});\n\n// Browse data provider with context record\nconst dataProviderBrowse = await Qorus.QorusDataProvider.getRecord();\n\n// Select factory provider\nconst factoryProvider = await dataProviderBrowse.get('factory');\n\n// Select db provider\nconst options = factoryProvider.getOptions('db');\n\n// Set required constructor option\noptions.set('datasource', 'pgsql:omquser/omquser@omquser%bee');\n// => {name: \"datasource\", required: true, types: [\"string\", \"object<AbstractDatasource>\"], jsTypes: [\"string\", \"oject\"], value: {type: \"string\", value: \"pgsql:omquser/omquser@omquser%bee\"}}\n","QorusOptions.validate":"Qorus.QorusAuthenticator.addEndpoint({\n  url: 'https://sandbox.qoretechnologies.com',\n  endpointId: 'rippy',\n  version: 'latest',\n});\nawait Qorus.QorusAuthenticator.login({\n  user: 'sandbox',\n  pass: 'sandbox',\n});\n\n// Browse data provider with context record\nconst dataProviderBrowse = await Qorus.QorusDataProvider.getRecord();\n\n// Select factory provider\nconst factoryProvider = await dataProviderBrowse.get('factory');\n\n// Select db provider\nconst options = factoryProvider.getOptions('db');\n\n// Get object of provided constructor option\noptions.validate('datasource', 'pgsql:omquser/omquser@omquser%bee');\n// => true\n","QorusOptions.validateRequired":"Qorus.QorusAuthenticator.addEndpoint({\n  url: 'https://sandbox.qoretechnologies.com',\n  endpointId: 'rippy',\n  version: 'latest',\n});\nawait Qorus.QorusAuthenticator.login({\n  user: 'sandbox',\n  pass: 'sandbox',\n});\n// Browse data provider with context record\nconst dataProviderBrowse = await Qorus.QorusDataProvider.getRecord();\n\n// Select factory provider\nconst factoryProvider = await dataProviderBrowse.get('factory');\n\n// Select db provider\nconst options = factoryProvider.getOptions('db');\n\n// Set required constructor option\noptions.set('datasource', 'pgsql:omquser/omquser@omquser%bee');\n\n// Validate if all the required constructor properties are provided\noptions.validateRequired();\n// => true\n","QorusRequest.deleteReq":"// First we initialize an Endpoint and provider user and pass to authenticate the user along with it\nQorus.QorusAuthenticator.addEndpoint({\n  endpointId: 'rippy',\n  url: 'https://sandbox.qoretechnologies.com',\n  version: 'latest',\n});\n\nawait Qorus.QorusAuthenticator.login({\n  user: 'sandbox',\n  pass: 'sandbox',\n});\n\n// Next we initialize a delete request against our defined Qorus server\nconst result = await Qorus.QorusRequest.deleteReq({\n  path: '/api/latest/classes/1',\n});\n","QorusRequest.get":"// First we initialize an Endpoint and provider user and pass to authenticate the user along with it\nQorus.QorusAuthenticator.addEndpoint({\n  url: 'https://sandbox.qoretechnologies.com',\n  endpointId: 'rippy',\n  version: 'latest',\n});\nawait Qorus.QorusAuthenticator.login({\n  user: 'sandbox',\n  pass: 'sandbox',\n});\n\n// Next we initialize a get request against our defined Qorus server\nconst result = await Qorus.QorusRequest.get({\n  path: '/api/latest/dataprovider/browse',\n});\n","QorusRequest.post":"// First we initialize an Endpoint\nQorus.QorusAuthenticator.addEndpoint({\n  url: 'https://sandbox.qoretechnologies.com',\n  endpointId: 'rippy',\n  version: 'latest',\n});\nawait Qorus.QorusAuthenticator.login({\n  user: 'sandbox',\n  pass: 'sandbox',\n});\n\n// Then we define the data object for the post request\nconst data = { user: 'sandbox', pass: 'sandbox' };\n\n// Next we initialize a post request against our defined Qorus server\nconst result = await Qorus.QorusRequest.post({\n  path: '/api/latest/public/login',\n  data: data,\n});\n","QorusRequest.put":"// First we initialize an Endpoint and provider user and pass to authenticate the user along with it\nQorus.QorusAuthenticator.addEndpoint({\n  url: 'https://sandbox.qoretechnologies.com',\n  endpointId: 'rippy',\n  version: 'latest',\n});\nawait Qorus.QorusAuthenticator.login({\n  user: 'sandbox',\n  pass: 'sandbox',\n});\n\n// Next we initialize a put request against our defined Qorus server\nconst result = await Qorus.QorusRequest.put({\n  path: '/api/latest/dataprovider/browse',\n  data: { context: 'api' },\n});\n","QorusValidator.getTypeFromValue":"// Validate value of a type\nconst result = await Qorus.QorusValidator.getTypeFromValue('test-value');\n// => string\n","QorusValidator.validate":"// Validate value of a type\nconst result = await Qorus.QorusValidator.validate('string', 'test-string');\n// => true\n","QorusWorkflows.get":"Qorus.QorusAuthenticator.addEndpoint({\n  url: 'https://sandbox.qoretechnologies.com',\n  endpointId: 'rippy',\n  version: 'latest',\n});\nawait Qorus.QorusAuthenticator.login({\n  user: 'sandbox',\n  pass: 'sandbox',\n});\n\nconst job = await QorusWorkflows.get(1);\n// => IWorkflow {workflowid, name, enabled...}\n"}